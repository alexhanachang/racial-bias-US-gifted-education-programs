enroll_raw <- read.csv(file = "data/unprocessed/Enrollment.csv")
gat_raw <- read.csv(file = "data/unprocessed/Gifted and Talented.csv")
```
<br>
### Relational data: preparation
In Chapter 13 of [R for Data Science](https://r4ds.had.co.nz/relational-data.html), we learned about relational data, which entails combining and exploring multiple data sets. In order to establish a relationship between `enroll_raw` and `gat_raw`, I first identified the key that can join the two tables. Within this data set, a primary key (`COMBOKEY`) already existed to identify each observation, which allowed me to easily use the `inner_join()` function from the `dplyr` package; each unique `COMBOKEY` represents a different school in the United States.
```{r}
intersect(names(enroll_raw),
names(gat_raw)) # identify key
enroll_raw %>%
count(COMBOKEY) %>%
filter(n > 1) # confirm key
gat_raw %>%
count(COMBOKEY) %>%
filter(n > 1) # confirm key
```
<br>
### Data transformation
Next, I transformed `gat_raw` to filter out schools that do not have GAT programs, leaving only schools that *do* have GAT programs.
```{r}
gat_raw <- gat_raw %>%
filter(SCH_GT_IND == "Yes")
```
In order to make later analyses easier, I renamed the variables more intuitively. This required cross-checking the variable names with the provided code book, which can be located by the path `misc/crdc notes/2017-18 CRDC File Structure.xlsx`. Additionally, I collapsed the race and ethnicity categories "American Indian/Alaska Native," "Native Hawaiian/Pacific Islander," and "Two or More Races" into a single category: "other race." I also constructed a BIPOC category by adding the Asian, Black, Hispanic, and other race populations. This left me with six race and ethnicity categories: `Asian`, `Black`, `Hispanic`, `white`, `other`, and `BIPOC`. Finally, I filtered out all-male and all-female schools from `enroll`.
```{r}
GAT <- gat_raw %>%
as_tibble() %>%
mutate(gat_raw,
state = LEA_STATE,
gat_hisp_m = SCH_GTENR_HI_M, gat_hisp_f = SCH_GTENR_HI_F,
gat_asian_m = SCH_GTENR_AS_M, gat_asian_f = SCH_GTENR_AS_F,
gat_black_m = SCH_GTENR_BL_M, gat_black_f = SCH_GTENR_BL_F,
gat_white_m = SCH_GTENR_WH_M, gat_white_f = SCH_GTENR_WH_F,
gat_other_m = SCH_GTENR_AM_M + SCH_GTENR_HP_M + SCH_GTENR_TR_M,
gat_other_f = SCH_GTENR_AM_F + SCH_GTENR_HP_F + SCH_GTENR_TR_F,
gat_bipoc_m = gat_hisp_m + gat_asian_m + gat_black_m + gat_other_m,
gat_bipoc_f = gat_hisp_f + gat_asian_f + gat_black_f + gat_other_f,
gat_male = gat_hisp_m + gat_asian_m + gat_black_m + gat_white_m + gat_other_m,
gat_female = gat_hisp_f + gat_asian_f + gat_black_f + gat_white_f + gat_other_f,
gat_total = gat_male + gat_female) %>%
select(COMBOKEY, state, gat_asian_m, gat_asian_f,
gat_black_m, gat_black_f, gat_hisp_m, gat_hisp_f,
gat_white_m, gat_white_f, gat_other_m, gat_other_f,
gat_bipoc_m, gat_bipoc_f,
gat_male, gat_female, gat_total)
enroll <- enroll_raw %>%
as_tibble() %>%
mutate(enroll_raw,
state = LEA_STATE,
hisp_m = SCH_ENR_HI_M, hisp_f = SCH_ENR_HI_F,
asian_m = SCH_ENR_AS_M, asian_f = SCH_ENR_AS_F,
black_m = SCH_ENR_BL_M, black_f = SCH_ENR_BL_F,
white_m = SCH_ENR_WH_M, white_f = SCH_ENR_WH_F,
other_m = SCH_ENR_AM_M + SCH_ENR_HP_M + SCH_ENR_TR_M,
other_f = SCH_ENR_AM_F + SCH_ENR_HP_F + SCH_ENR_TR_F,
bipoc_m = hisp_m + asian_m + black_m + other_m,
bipoc_f = hisp_f + asian_f + black_f + other_f,
male = hisp_m + asian_m + black_m + white_m + other_m,
female = hisp_f + asian_f + black_f + white_f + other_f,
total = male + female) %>%
filter(male > 0,
female > 0) %>%
select(COMBOKEY, state, asian_m, asian_f,
black_m, black_f, hisp_m, hisp_f,
white_m, white_f, other_m, other_f,
bipoc_m, bipoc_f, male, female, total)
```
<br>
\newpage
> # Analysis I: Representation of students by race and ethnicity in GAT programs
### Data transformation
First, I collapsed the population variables --- which were disaggregated by sex --- by race for both `GAT` and `enroll`. These data frames were renamed `GAT_RE` --- which contains the variables `COMBOKEY`, `state`, `gat_asian`, `gat_black`, `gat_hisp`, `gat_white`, `gat_other`, `gat_bipoc`, and `gat_total` --- and `enroll_RE` --- which contains the variables `COMBOKEY`, `asian`, `black`, `hisp`, `white`, `other`, `bipoc`, and `total`.
```{r}
GAT_RE <- GAT %>%
mutate(GAT,
gat_asian = gat_asian_m + gat_asian_f,
gat_black = gat_black_m + gat_black_f,
gat_hisp = gat_hisp_m + gat_hisp_f,
gat_white = gat_white_m + gat_white_f,
gat_other = gat_other_m + gat_other_f,
gat_bipoc = gat_asian + gat_black + gat_hisp + gat_other) %>%
filter(gat_total > 0) %>%
select(COMBOKEY, state,
gat_asian, gat_black, gat_hisp,
gat_white, gat_other, gat_bipoc,
gat_total)
enroll_RE <- enroll %>%
mutate(enroll,
asian = asian_m + asian_f,
black = black_m + black_f,
hisp = hisp_m + hisp_f,
white = white_m + white_f,
other = other_m + other_f,
bipoc = asian + black + hisp + other) %>%
select(COMBOKEY,
asian, black, hisp, white, other, bipoc,
total)
```
<br>
### Relational data: `inner_join()`
Then, I joined the two data sets using a mutating join, `inner_join()`. For this project, `inner_join()` matched pairs of observations in `GAT_RE` and `enroll_RE` by `COMBOKEY`, creating one pooled data set `RE` --- which contains the variables `COMBOKEY`, `state`, `gat_asian`, `asian`, `gat_black`, `black`, `gat_hisp`, `hisp`, `gat_white`, `white`, `gat_other`, `other`, `gat_bipoc`, `bipoc`, `gat_total`, and `total`.
```{r}
RE <- enroll_RE %>%
inner_join(GAT_RE,
by = "COMBOKEY") %>%
select(COMBOKEY, state, gat_asian, asian,
gat_black, black,
gat_hisp, hisp,
gat_white, white,
gat_other, other,
gat_bipoc, bipoc,
gat_total, total)
```
<br>
### Tidy data
The most difficult part in tidying this data set was creating a functional race column. The first step was to use the `unite()` function in order collapse the two populations that were separated by race and ethnicity: `gat_RACE` and `RACE`. By uniting the two variables before pivoting the table, I could create a single race variable --- which I later convert into a factor --- as opposed to two variables, which would not constitute a tidy data set. Next, using `pivot_longer()`, I pivoted the table, creating two new variables: `race` and `count`. `count` hosted the united population variables from the untidy data frame `RE`, but then separated `count` into `gat_count` --- the number of students in the GAT program --- and `race_count` --- the total number of students at the school disaggregated by `race`. Although it might technically be redundant to name this new variable `race_count` as opposed to just `count`, I found that this naming convention was much clearer in distinguishing `race_count` from `gat_count` and `total`.
Because using `unite()` and `separate()` converts variables into character vectors, I needed to transform `gat_count` and `race_count` back into numeric vectors This was necessary in order to create visualizations and calculate proportions using my tidied data. Additionally, I filtered out schools with fewer than 10 students, and I arranged the columns into an intuitive order using `select()`.
```{r}
RE <- RE %>%
unite(asian, gat_asian, asian, sep = "_") %>%
unite(black, gat_black, black, sep = "_") %>%
unite(hisp, gat_hisp, hisp, sep = "_") %>%
unite(white, gat_white, white, sep = "_") %>%
unite(other, gat_other, other, sep = "_") %>%
unite(bipoc, gat_bipoc, bipoc, sep = "_") %>%
pivot_longer(c("asian", "black", "hisp", "white", "other", "bipoc"),
names_to = "race", values_to = "count") %>%
separate(count, into = c("gat_count", "race_count"), sep = "_") %>%
mutate(gat_count = as.numeric(gat_count),
race_count = as.numeric(race_count)) %>% # typeof() = numeric
filter(total >= 10) %>% # school must have more than 10 students
select(COMBOKEY, state, race, gat_count, race_count,
gat_total, total) # select columns
```
While `RE` is a tidy data set, I decided to also create a grouped data frame as a second way of viewing this data set. `RE_nest` is a nested data frame that allows you to view population data by school. Below, I printed an example using the first element of `GAT and race populations` for the school whose `COMBOKEY` is `010000500879`.
```{r}
RE_nest <- RE %>%
group_by(state, COMBOKEY) %>%
nest() %>%
mutate("GAT and race populations" = data) %>%
select(COMBOKEY, state, "GAT and race populations") # view data by school
RE_nest
RE_nest$"GAT and race populations"[[1]]
```
<br>
### Factors
In order to make analysis easier, I converted made race --- a categorical variable --- into a factor with six levels: `asian`, `black`, `hisp`, `white`, `other`, and `bipoc`.
```{r}
race_levels <- c(
"asian", "black", "hisp", "white", "other", "bipoc"
)
race <- factor(RE$race, levels = race_levels)
```
<br>
### Data export
I exported `RE` and `RE_nest`, which can be located through the following paths: `data/processed/Race and ethnicity_tidy.rds`, `data/processed/Race and ethnicity_tidy.csv`, and `data/processed/Race and ethnicity by school_tidy.rds`.
```{r, eval=FALSE}
saveRDS(RE, file = "data/processed/Race and ethnicity_tidy.rds")
write_csv(RE, file = "data/processed/Race and ethnicity_tidy.csv")
saveRDS(RE_nest, file = "data/processed/Race and ethnicity by school_tidy.rds")
```
<br>
### Data transformation
The last steps before visualizing this data set were to calculate (1) the proportion of students in a GAT program for each level in the factor `race` and (2) the proportion of the school enrolled in a GAT program.
(1) For each school, I calculated the proportion of X race students in a GAT program by dividing `gat_count` by `race_count`, which are both disaggregated by `race`. I call this new variable `prop_gat_race`.
(2) Second, I calculated the proportion of the entire school enrolled in a GAT program by dividing `gat_total` by `total`. This variable is stored as `prop_gat_total`.
I call this new data frame --- which includes both `prop_gat_race` and `prop_gat_total` --- `RE_prop`.
```{r}
RE_prop <- RE %>%
mutate(prop_gat_race = gat_count / race_count,
prop_gat_total = gat_total / total)
RE_prop
```
At some schools, there were no students of a level in `race`, so dividing by `race_count` --- or dividing by `0` --- produces `NaN` ("not a number"). For these cases, I replaced `NaN` with `0`. Additionally, note that when `prop_gat_race` equals `0`, there will be missing values in the visualizations below.
```{r}
RE_prop$prop_gat_race[is.nan(RE_prop$prop_gat_race)] <- 0
```
After looking through my data and testing various visualizations, I decided to narrow my definition of a "Gifted and Talented" program to only include programs where less than half of the school's population was in a GAT program. Thus, I filtered out schools where `prop_gat_total` was greater than `0.5`. In addition, I found a few instances where `prop_gat_race` was greater than `1`, meaning there were more students of X race enrolled in a GAT program than there were students of X race in the entire school; I removed these schools from `RE_prop`, and I believe that they were errors from coding. Second, I only included schools where `prop_gat_total` was greater than `0`, meaning that there was at least one student enrolled in the school's GAT program.
```{r}
RE_prop <- RE_prop %>%
filter(prop_gat_race < 1) %>%
filter(prop_gat_total < 0.5) %>%
filter(prop_gat_total > 0)
```
<br>
### Data visualization
In the following series of visualizations, I demonstrate that BIPOC students are underrepresented in GAT programs, while white students are overrepresented in GAT programs.
<br>
\newpage
#### (1) Representation of Asian students in GAT programs:
This graphic visualizes the representation of Asian students in GAT programs by graphing the proportion of Asian students in GAT programs by the proportion of a school's entire population that is in its GAT program. In other words, I graphed `prop_gat_total` on the x-axis and `prop_gat_race` on the y-axis after filtering observations where `race == "asian"`. Each point on this graph represents an individual school.
I included a line of identity $y=x$ to be used as a reference to compare the (un)equality of representation in GAT programs by race. If Asian students in GAT programs were represented in proportion to the total number of students in GAT programs for any given school, our fitted model from `geom_smooth()` would lie exactly along the line $y=x$. Our model suggests that Asian students are slightly overrepresented in GAT programs.
```{r}
RE_prop %>%
filter(race == "asian") %>%
ggplot(aes(x = prop_gat_total, y = prop_gat_race)) +
geom_jitter(color = "grey75", size = 0.4) +
geom_smooth(color = "firebrick1", se = F) +
geom_abline(intercept = 0, slope = 1, size = 1, color = "grey15") +
scale_x_continuous(name = "Proportion of all students in GAT program", limits = c(0, 0.5)) +
scale_y_continuous(name = "Proportion of Asian students in GAT program", limits = c(0,1)) +
labs(title = "Representation of Asian students in GAT programs")
```
<br>
\newpage
#### (2) Representation of Black students in GAT programs:
This graphic visualizes the representation of Black students in GAT programs by graphing the proportion of Black students in GAT programs by the proportion of a school's entire population that is in its GAT program.
As explained above, if Black students in GAT programs were represented in proportion to the total number of students in GAT programs for any given school, our fitted model from `geom_smooth()` would lie exactly along the line $y=x$. Our model suggests that Black students are significantly underrepresented in GAT programs.
```{r}
RE_prop %>%
filter(race == "black") %>%
ggplot(aes(x = prop_gat_total, y = prop_gat_race)) +
geom_jitter(color = "grey75", size = 0.4) +
geom_smooth(color = "goldenrod1", se = F) +
geom_abline(intercept = 0, slope = 1, size = 1, color = "grey15") +
scale_x_continuous(name = "Proportion of all students in GAT program", limits = c(0, 0.5)) +
scale_y_continuous(name = "Proportion of Black students in GAT program", limits = c(0,1)) +
labs(title = "Representation of Black students in GAT programs")
enroll_raw <- read.csv(file = "data/unprocessed/Enrollment.csv")
runApp()
########## DATA IMPORT ########## ########## ########## ##########
## Data import -------------------------------------------------------------
enrollment_raw <- read.csv(file = "data/unprocessed/Enrollment.csv")
gifted_talented_raw <- read.csv(file = "data/unprocessed/Gifted and Talented.csv")
## Load packages ----------------------------------------------------------
library(ggplot2)
library(tidyverse)
## Identify key -----------------------------------------------------------
intersect(names(enrollment_raw),
names(gifted_talented_raw))
enrollment_raw %>%
count(COMBOKEY) %>%
filter(n > 1) # Confirm key
gifted_talented_raw %>%
count(COMBOKEY) %>%
filter(n > 1) # Confirm key
## filter() -------------------------------------------------------------------------
# Filter out schools that do not have GAT programs
gifted_talented_raw <- gifted_talented_raw %>%
filter(SCH_GT_IND == "Yes")
## Rename ------------------------------------------------------------------
# Rename variables in GAT
gifted_talented <- gifted_talented_raw %>%
as_tibble() %>%
mutate(gifted_talented_raw,
state = LEA_STATE,
gifted_hisp_m = SCH_GTENR_HI_M, gat_hisp_f = SCH_GTENR_HI_F,
gifted_asian_m = SCH_GTENR_AS_M, gat_asian_f = SCH_GTENR_AS_F,
gifted_black_m = SCH_GTENR_BL_M, gat_black_f = SCH_GTENR_BL_F,
gifted_white_m = SCH_GTENR_WH_M, gat_white_f = SCH_GTENR_WH_F,
gifted_other_m = SCH_GTENR_AM_M + SCH_GTENR_HP_M + SCH_GTENR_TR_M,
gifted_other_f = SCH_GTENR_AM_F + SCH_GTENR_HP_F + SCH_GTENR_TR_F,
gifted_bipoc_m = gifted_hisp_m + gifted_asian_m + gifted_black_m + gifted_other_m,
gifted_bipoc_f = gifted_hisp_f + gifted_asian_f + gifted_black_f + gifted_other_f,
gifted_male = gifted_hisp_m + gifted_asian_m + gifted_black_m + gifted_white_m + gifted_other_m,
gifted_female = gifted_hisp_f + gifted_asian_f + gifted_black_f + gifted_white_f + gifted_other_f,
gifted_total = gifted_male + gifted_female) %>% # rename and collapse other
select(COMBOKEY, state, gifted_asian_m, gifted_asian_f,
gifted_black_m, gifted_black_f, gifted_hisp_m, gifted_hisp_f,
gifted_white_m, gifted_white_f, gifted_other_m, gifted_other_f,
gifted_bipoc_m, gifted_bipoc_f,
gifted_male, gifted_female, gifted_total)
## Rename ------------------------------------------------------------------
# Rename variables in GAT
gifted_talented <- gifted_talented_raw %>%
as_tibble() %>%
mutate(gifted_talented_raw,
state = LEA_STATE,
gifted_hisp_m = SCH_GTENR_HI_M, gifted_hisp_f = SCH_GTENR_HI_F,
gifted_asian_m = SCH_GTENR_AS_M, gifted_asian_f = SCH_GTENR_AS_F,
gifted_black_m = SCH_GTENR_BL_M, gifted_black_f = SCH_GTENR_BL_F,
gifted_white_m = SCH_GTENR_WH_M, gifted_white_f = SCH_GTENR_WH_F,
gifted_other_m = SCH_GTENR_AM_M + SCH_GTENR_HP_M + SCH_GTENR_TR_M,
gifted_other_f = SCH_GTENR_AM_F + SCH_GTENR_HP_F + SCH_GTENR_TR_F,
gifted_bipoc_m = gifted_hisp_m + gifted_asian_m + gifted_black_m + gifted_other_m,
gifted_bipoc_f = gifted_hisp_f + gifted_asian_f + gifted_black_f + gifted_other_f,
gifted_male = gifted_hisp_m + gifted_asian_m + gifted_black_m + gifted_white_m + gifted_other_m,
gifted_female = gifted_hisp_f + gifted_asian_f + gifted_black_f + gifted_white_f + gifted_other_f,
gifted_total = gifted_male + gifted_female) %>% # rename and collapse other
select(COMBOKEY, state, gifted_asian_m, gifted_asian_f,
gifted_black_m, gifted_black_f, gifted_hisp_m, gifted_hisp_f,
gifted_white_m, gifted_white_f, gifted_other_m, gifted_other_f,
gifted_bipoc_m, gifted_bipoc_f,
gifted_male, gifted_female, gifted_total)
# Rename variables in enroll
enrollment <- enrollment_raw %>%
as_tibble() %>%
mutate(enrollment_raw,
state = LEA_STATE,
hisp_m = SCH_ENR_HI_M, hisp_f = SCH_ENR_HI_F,
asian_m = SCH_ENR_AS_M, asian_f = SCH_ENR_AS_F,
black_m = SCH_ENR_BL_M, black_f = SCH_ENR_BL_F,
white_m = SCH_ENR_WH_M, white_f = SCH_ENR_WH_F,
other_m = SCH_ENR_AM_M + SCH_ENR_HP_M + SCH_ENR_TR_M,
other_f = SCH_ENR_AM_F + SCH_ENR_HP_F + SCH_ENR_TR_F,
bipoc_m = hisp_m + asian_m + black_m + other_m,
bipoc_f = hisp_f + asian_f + black_f + other_f,
male = hisp_m + asian_m + black_m + white_m + other_m,
female = hisp_f + asian_f + black_f + white_f + other_f,
total = male + female) %>% # rename and collapse other
select(COMBOKEY, state, asian_m, asian_f,
black_m, black_f, hisp_m, hisp_f,
white_m, white_f, other_m, other_f,
bipoc_m, bipoc_f, male, female, total)
## filter() ----------------------------------------------------------------
# Filter out all-boys and all-girls schools
enrollment <- enrollment %>%
filter(male > 0,
female > 0)
########## ANALYSIS 1: RACE-ETHNICITY ########## ########## ########## ##########
## Rename --------------------------------------------------------------------
# Rename variables in gifted + talented
gifted_talented_sum_by_race <- gifted_talented %>%
mutate(gifted_talented,
gifted_asian = gifted_asian_m + gifted_asian_f,
gifted_black = gifted_black_m + gifted_black_f,
gifted_hisp = gifted_hisp_m + gifted_hisp_f,
gifted_white = gifted_white_m + gifted_white_f,
gifted_other = gifted_other_m + gifted_other_f,
gifted_bipoc = gifted_asian + gifted_black + gifted_hisp + gifted_other) %>%
filter(gifted_total > 0) %>%
select(COMBOKEY, state,
gifted_asian, gifted_black, gifted_hisp,
gifted_white, gifted_other, gifted_bipoc,
gifted_total)
# Rename variables in enroll
enrollment_sum_by_race <- enroll %>%
mutate(enroll,
asian = asian_m + asian_f,
black = black_m + black_f,
hisp = hisp_m + hisp_f,
white = white_m + white_f,
other = other_m + other_f,
bipoc = asian + black + hisp + other) %>%
select(COMBOKEY,
asian, black, hisp, white, other, bipoc,
total)
source("~/Desktop/portfolio/racial-bias-US-gifted-education-programs/data_cleaning.R", echo=TRUE)
last_error()
rlang::last_error()
## Identify key -----------------------------------------------------------
intersect(names(enrollment_raw),
names(gifted_talented_raw))
enrollment_raw %>%
count(COMBOKEY) %>%
filter(n > 1) # Confirm key
gifted_talented_raw %>%
count(COMBOKEY) %>%
filter(n > 1) # Confirm key
## filter() -------------------------------------------------------------------------
# Filter out schools that do not have GAT programs
gifted_talented_raw <- gifted_talented_raw %>%
filter(SCH_GT_IND == "Yes")
## Rename ------------------------------------------------------------------
# Rename variables in gifted_talented_raw
gifted_talented <- gifted_talented_raw %>%
as_tibble() %>%
mutate(gifted_talented_raw,
state = LEA_STATE,
gifted_hisp_m = SCH_GTENR_HI_M, gifted_hisp_f = SCH_GTENR_HI_F,
gifted_asian_m = SCH_GTENR_AS_M, gifted_asian_f = SCH_GTENR_AS_F,
gifted_black_m = SCH_GTENR_BL_M, gifted_black_f = SCH_GTENR_BL_F,
gifted_white_m = SCH_GTENR_WH_M, gifted_white_f = SCH_GTENR_WH_F,
gifted_other_m = SCH_GTENR_AM_M + SCH_GTENR_HP_M + SCH_GTENR_TR_M,
gifted_other_f = SCH_GTENR_AM_F + SCH_GTENR_HP_F + SCH_GTENR_TR_F,
gifted_bipoc_m = gifted_hisp_m + gifted_asian_m + gifted_black_m + gifted_other_m,
gifted_bipoc_f = gifted_hisp_f + gifted_asian_f + gifted_black_f + gifted_other_f,
gifted_male = gifted_hisp_m + gifted_asian_m + gifted_black_m + gifted_white_m + gifted_other_m,
gifted_female = gifted_hisp_f + gifted_asian_f + gifted_black_f + gifted_white_f + gifted_other_f,
gifted_total = gifted_male + gifted_female) %>% # rename and collapse other
select(COMBOKEY, state, gifted_asian_m, gifted_asian_f,
gifted_black_m, gifted_black_f, gifted_hisp_m, gifted_hisp_f,
gifted_white_m, gifted_white_f, gifted_other_m, gifted_other_f,
gifted_bipoc_m, gifted_bipoc_f,
gifted_male, gifted_female, gifted_total)
# Rename variables in enrollment
enrollment <- enrollment_raw %>%
as_tibble() %>%
mutate(enrollment_raw,
state = LEA_STATE,
hisp_m = SCH_ENR_HI_M, hisp_f = SCH_ENR_HI_F,
asian_m = SCH_ENR_AS_M, asian_f = SCH_ENR_AS_F,
black_m = SCH_ENR_BL_M, black_f = SCH_ENR_BL_F,
white_m = SCH_ENR_WH_M, white_f = SCH_ENR_WH_F,
other_m = SCH_ENR_AM_M + SCH_ENR_HP_M + SCH_ENR_TR_M,
other_f = SCH_ENR_AM_F + SCH_ENR_HP_F + SCH_ENR_TR_F,
bipoc_m = hisp_m + asian_m + black_m + other_m,
bipoc_f = hisp_f + asian_f + black_f + other_f,
male = hisp_m + asian_m + black_m + white_m + other_m,
female = hisp_f + asian_f + black_f + white_f + other_f,
total = male + female) %>% # rename and collapse other
select(COMBOKEY, state, asian_m, asian_f,
black_m, black_f, hisp_m, hisp_f,
white_m, white_f, other_m, other_f,
bipoc_m, bipoc_f, male, female, total)
## filter() ----------------------------------------------------------------
# Filter out all-boys and all-girls schools
enrollment <- enrollment %>%
filter(male > 0,
female > 0)
########## ANALYSIS 1: SUM BY RACE ########## ########## ########## ##########
## Rename --------------------------------------------------------------------
# Rename variables in gifted_talented
gifted_talented_sum_by_race <- gifted_talented %>%
mutate(gifted_talented,
gifted_asian = gifted_asian_m + gifted_asian_f,
gifted_black = gifted_black_m + gifted_black_f,
gifted_hisp = gifted_hisp_m + gifted_hisp_f,
gifted_white = gifted_white_m + gifted_white_f,
gifted_other = gifted_other_m + gifted_other_f,
gifted_bipoc = gifted_asian + gifted_black + gifted_hisp + gifted_other) %>%
filter(gifted_total > 0) %>%
select(COMBOKEY, state,
gifted_asian, gifted_black, gifted_hisp,
gifted_white, gifted_other, gifted_bipoc,
gifted_total)
# Rename variables in enrollment
enrollment_sum_by_race <- enrollment %>%
mutate(enrollment,
asian = asian_m + asian_f,
black = black_m + black_f,
hisp = hisp_m + hisp_f,
white = white_m + white_f,
other = other_m + other_f,
bipoc = asian + black + hisp + other) %>%
select(COMBOKEY,
asian, black, hisp, white, other, bipoc,
total)
## inner_join() -------------------------------------------------------------
gifted_talented_enrollment_by_race <- enrollment_sum_by_race %>%
inner_join(gifted_talented_sum_by_race,
by = "COMBOKEY")
gifted_talented_enrollment_by_race <- gifted_talented_enrollment_by_race %>%
select(COMBOKEY, state, gifted_asian, asian,
gifted_black, black,
gifted_hisp, hisp,
gifted_white, white,
gifted_other, other,
gifted_bipoc, bipoc,
gifted_total, total)
## Tidy --------------------------------------------------------------------
gifted_talented_enrollment_by_race <- gifted_talented_enrollment_by_race %>%
unite(asian, gifted_asian, asian, sep = "_") %>%
unite(black, gifted_black, black, sep = "_") %>%
unite(hisp, gifted_hisp, hisp, sep = "_") %>%
unite(white, gifted_white, white, sep = "_") %>%
unite(other, gifted_other, other, sep = "_") %>%
unite(bipoc, gifted_bipoc, bipoc, sep = "_") %>%
pivot_longer(c("asian", "black", "hisp", "white", "other", "bipoc"),
names_to = "race", values_to = "count") %>% # pivot columns
separate(count, into = c("gifted_count", "race_count"), sep = "_") %>% # separate race into total
# count and GAT count
mutate(gifted_count = as.numeric(gifted_count),
race_count = as.numeric(race_count)) %>% # typeof() = numeric
filter(total >= 10) %>% # school must have more than 10 students
select(COMBOKEY, state, race, gifted_count, race_count,
gifted_total, total) # select columns
race_levels <- c(
"asian", "black", "hisp", "white", "other", "bipoc"
) # factor race
race <- factor(RE$race, levels = race_levels) # factor race
race <- factor(gifted_talented_enrollment_by_race$race, levels = race_levels) # factor race
## Export data -------------------------------------------------------------------------
saveRDS(gifted_talented_enrollment_by_race, file = "data/processed/gifted_talented_enrollment_by_race.rds")
write_csv(gifted_talented_enrollment_by_race, file = "data/processed/gifted_talented_enrollment_by_race.csv")
gifted_talented_enrollment_by_race <- gifted_talented_enrollment_by_race %>%
mutate(prop_gifted_race = gifted_count / race_count,
prop_gifted_total = gifted_total / total)
gifted_talented_enrollment_by_race
gifted_talented_enrollment_by_race$prop_gifted_race[is.nan(gifted_talented_enrollment_by_race$prop_gifted_race)] <- 0
gifted_talented_enrollment_by_race
gifted_talented_enrollment_by_race <- gifted_talented_enrollment_by_race %>%
filter(prop_gifted_race < 1) %>%
filter(prop_gifted_total < 0.5) %>%
filter(prop_gifted_total > 0)
shiny::runApp('app')
gifted_talented_enrollment_by_race %>%
filter(race == "black") %>%
ggplot(aes(x = prop_gifted_total, y = prop_gifted_race)) +
geom_jitter(color = "grey75", size = 0.4) +
geom_smooth(color = "goldenrod1", se = F) +
geom_abline(intercept = 0, slope = 1, size = 1, color = "grey15") +
scale_x_continuous(name = "Proportion of all students in GAT program", limits = c(0, 0.5)) +
scale_y_continuous(name = "Proportion of Black students in GAT program", limits = c(0,1)) +
labs(title = "Representation of Black students in GAT programs") +
theme_minimal()
library(shiny)
ui <- fluidPage(
# application title
titlePanel("MY APP"),
# sidebar with a slider input for number of bins
sidebarLayout(
# position sidebar
position = "right",
# radio buttons for fill variable
radioButtons(
inputId = "color_var",
label = "Select Legend Variable:",
choices = list(
"asian",
"black",
"hisp",
"white",
"other",
"bipoc"
),
selected = "race"
)
),
mainPanel(
plotOutput("plot1")
)
